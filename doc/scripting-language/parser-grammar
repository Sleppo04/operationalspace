/** script is the goal of the compiler **/
/** Program **/
script              : includelist statementlist TOKEN_EOF 



/** Top-level only **/
includelist         : include includelist
                    | include

include             : TOKEN_INCLUDE TOKEN_STRING_LITERAL TOKEN_SEMICOLON



/** Statements **/

variable_definition : TOKEN_VAR type_identifier TOKEN_IDENTIFIER TOKEN_SEMICOLON
                    | TOKEN_PERSIST TOKEN_VAR type_identifier TOKEN_IDENTIFIER TOKEN_SEMICOLON


member              : type_identifier TOKEN_IDENTIFIER TOKEN_SEMICOLON

memberlist          : member memberlist
                    | member

type_definition     : TOKEN_TYPE type_identifier TOKEN_LEFT_BRACE memberlist TOKEN_RIGHT_BRACE

return_statement    : TOKEN_RETURN expression TOKEN_SEMICOLON

break_statement     : TOKEN_BREAK TOKEN_SEMICOLON

member_lvalue       : TOKEN_DOT TOKEN_IDENTIFIER
                    | TOKEN_DOT TOKEN_IDENTIFIER member_lvalue

lvalue              : TOKEN_IDENTIFIER
                    | TOKEN_IDENTIFIER member_lvalue

assignment          : lvalue TOKEN_EQUALS expression TOKEN_SEMICOLON

top_level_statement : variable_definition
                    | type_definition
                    | function
                    | expression
                    | assignment

inner_statement     : variable_definition
                    | expression
                    | assignment
                    | return_statement
                    | break_statement

inner_list          : inner_statement inner_list
                    | inner_statement

inner_compound      : TOKEN_LEFT_BRACE inner_list TOKEN_RIGHT_BRACE
                    | inner_statement

statementlist       : statement statementlist
                    | statement

compound_statement  : TOKEN_LEFT_BRACE statementlist TOKEN_RIGHT_BRACE
                    | statement

if                  : TOKEN_IF TOKEN_LEFT_PARENTHESIS expression TOKEN_RIGHT_PARENTHESIS inner_compound elif_list else_statement

elif_list           : elif_statement elif_list
                    | elif_statement

elif_statement      : TOKEN_ELIF TOKEN_LEFT_PARENTHESIS expression TOKEN_RIGHT_PARENTHESIS inner_compound
                    |

else_statement      : TOKEN_ELSE inner_compound
                    | 

while               : TOKEN_WHILE TOKEN_LEFT_PARENTHESIS expression TOKEN_RIGHT_PARENTHESIS inner_compound


/** Expression stuff **/
expression          : evalue
                    | expression_p0


expression_p0       : expression_compare

expression_compare  : expression_p1 TOKEN_LESS_THAN                 expression_p1
                    | expression_p1 TOKEN_GREATER_THAN              expression_p1
                    | expression_p1 TOKEN_LESS_THAN    TOKEN_EQUALS expression_p1
                    | expression_p1 TOKEN_GREATER_THAN TOKEN_EQUALS expression_p1


expression_p1       : expression_addition

expression_addition : expression_p2 addition_list

addition_list       : expression_p2 TOKEN_PLUS expression_p2 addition_list
                    | expression_p2 TOKEN_MINUS expression_p2 addition_list
                    | 


expression_p2       : expression_division

expression_division : expression_p3 division_list

division_list       : expression_p3 TOKEN_ASTERISK expression_p3 division_list
                    | expression_p3 TOKEN_SLASH expression_p3 division_list
                    | 


expression_p3       : expression_not
                    | expression_negative

expression_not      : TOKEN_BANG expression_p4

expression_negative : TOKEN_MINUS expression_p4


expression_p4       : expression_parentheses
                    | evalue

expression_paren    : TOKEN_LEFT_PARENTHESIS expression TOKEN_RIGHT_PARENTHESIS


evalue              : literal
                    | lvalue
                    | function_call

literal             : TOKEN_INT_LITERAL
                    | TOKEN_FLOAT_LITERAL
                    | TOKEN_STRING_LITERAL
                    | TOKEN_FALSE
                    | TOKEN_TRUE

function_call       : TOKEN_IDENTIFIER TOKEN_LEFT_PARENTHESIS argument_list TOKEN_RIGHT_PARENTHESIS TOKEN_SEMICOLON

argument_list       : argument argument_list
                    | argument

argument            : expression

type_identifier	    : TOKEN_IDENTIFIER

function            : TOKEN_FUNCTION type_identifier TOKEN_IDENTIFIER TOKEN_LEFT_PARENTHESES (TOKEN_IDENTIFIER TOKEN_IDENTIFIER TOKEN_COMMA)* TOKEN_IDENTIFIER TOKEN_IDENTIFIER TOKEN_RIGHT_PARENTHESES function_compound
