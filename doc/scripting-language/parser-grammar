/** script is the goal of the compiler **/
/** Program **/
script              : includelist statementlist TOKEN_EOF 



/** Top-level only **/
includelist         : include includelist
                    | include

include             : TOKEN_INCLUDE TOKEN_STRING_LITERAL TOKEN_SEMICOLON



/** Statements **/
persist             : TOKEN_PERSIST TOKEN_IDENTIFIER

variable_definition : TOKEN_VAR type_identifier TOKEN_IDENTIFIER TOKEN_SEMICOLON


member              : type_identifier TOKEN_IDENTIFIER TOKEN_SEMICOLON

memberlist          : member memberlist
                    | member

type_definition     : TOKEN_TYPE type_identifier TOKEN_LEFT_BRACE memberlist TOKEN_RIGHT_BRACE

return_statement    : TOKEN_RETURN expression TOKEN_SEMICOLON

break_statement     : TOKEN_BREAK TOKEN_SEMICOLON

member_lvalue       : TOKEN_DOT TOKEN_IDENTIFIER
                    | TOKEN_DOT TOKEN_IDENTIFIER member_lvalue

lvalue              : TOKEN_IDENTIFIER
                    | TOKEN_IDENTIFIER member_lvalue

assignment          : lvalue TOKEN_EQUALS expression TOKEN_SEMICOLON

top_level_statement : variable_definition
                    | persist
                    | expression
                    | function
					| type_definition
					| function
                    | assignment

inner_statement     : variable_definition
					| expression
                    | assignment
					| return_statement
                    | break_statement

inner_list          : inner_statement inner_list
                    | inner_statement

inner_compound      : TOKEN_LEFT_BRACE inner_list TOKEN_RIGHT_BRACE
                    | inner_statement

statementlist       : statement statementlist
                    | statement

compound_statement  : TOKEN_LEFT_BRACE statementlist TOKEN_RIGHT_BRACE
                    | statement

if                  : TOKEN_IF TOKEN_LEFT_PARENTHESIS expression TOKEN_RIGHT_PARENTHESIS inner_compound elif_statement else_statement

elif                : TOKEN_ELIF TOKEN_LEFT_PARENTHESIS expression TOKEN_RIGHT_PARENTHESIS inner_compound
                    |

else                : TOKEN_ELSE inner_compound
                    | 

while               : TOKEN_WHILE TOKEN_LEFT_PARENTHESIS expression TOKEN_RIGHT_PARENTHESIS inner_compound


/** Expression stuff **/
value               : TOKEN_IDENTIFIER
                    | TOKEN_INT_LITERAL
                    | TOKEN_FLOAT_LITERAL
                    | TOKEN_STRING_LITERAL
                    | TOKEN_FALSE
                    | TOKEN_TRUE

binop_expression    : evalue TOKEN_PLUS expression
                    | evalue TOKEN_MINUS expression
                    | evalue TOKEN_ASTERISK expression
                    | evalue TOKEN_SLASH expression
                    | evalue TOKEN_LESS_THAN expression
                    | evalue TOKEN_GREATER_THAN expression
                    | evalue TOKEN_LESS_THAN TOKEN_EQUALS expression
                    | evalue TOKEN_GREATER_THAN TOKEN_EQUALS expression
                    | evalue TOKEN_EQUALS TOKEN_EQUALS expression
                    | evalue TOKEN_AMPERSAND TOKEN_AMPERSAND expression
                    | evalue TOKEN_PIPE TOKEN_PIPE expression

unop_expression     : TOKEN_MINUS expression
                    | TOKEN_BANG expression

paren_expression    : TOKEN_LEFT_PARENTHESIS expression TOKEN_RIGHT_PARENTHESIS

expression          : value
                    | binop_expression
                    | unop_expression
                    | paren_expression

evalue              : value
                    | lvalue

type_identifier	    : TOKEN_IDENTIFIER

function            : TOKEN_FUNCTION type_identifier TOKEN_IDENTIFIER TOKEN_LEFT_PARENTHESES (TOKEN_IDENTIFIER TOKEN_IDENTIFIER TOKEN_COMMA)* TOKEN_IDENTIFIER TOKEN_IDENTIFIER TOKEN_RIGHT_PARENTHESES function_compound
